#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.468
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aethers.Notebook.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aethersnotebook")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCdmaCellLocation(Aethers.Notebook.Model.CdmaCellLocation instance);
    partial void UpdateCdmaCellLocation(Aethers.Notebook.Model.CdmaCellLocation instance);
    partial void DeleteCdmaCellLocation(Aethers.Notebook.Model.CdmaCellLocation instance);
    partial void InsertGsmCellLocation(Aethers.Notebook.Model.GsmCellLocation instance);
    partial void UpdateGsmCellLocation(Aethers.Notebook.Model.GsmCellLocation instance);
    partial void DeleteGsmCellLocation(Aethers.Notebook.Model.GsmCellLocation instance);
    partial void InsertDataConnectionState(Aethers.Notebook.Model.DataConnectionState instance);
    partial void UpdateDataConnectionState(Aethers.Notebook.Model.DataConnectionState instance);
    partial void DeleteDataConnectionState(Aethers.Notebook.Model.DataConnectionState instance);
    partial void DeleteLocation(Aethers.Notebook.Model.Location instance);
    partial void InsertLogEntry(Aethers.Notebook.Model.LogEntry instance);
    partial void UpdateLogEntry(Aethers.Notebook.Model.LogEntry instance);
    partial void DeleteLogEntry(Aethers.Notebook.Model.LogEntry instance);
    partial void InsertNeighbouringCells(Aethers.Notebook.Model.NeighbouringCells instance);
    partial void UpdateNeighbouringCells(Aethers.Notebook.Model.NeighbouringCells instance);
    partial void DeleteNeighbouringCells(Aethers.Notebook.Model.NeighbouringCells instance);
    partial void InsertLoggerIdentifier(Aethers.Notebook.Model.LoggerIdentifier instance);
    partial void UpdateLoggerIdentifier(Aethers.Notebook.Model.LoggerIdentifier instance);
    partial void DeleteLoggerIdentifier(Aethers.Notebook.Model.LoggerIdentifier instance);
    partial void InsertNeighbouringCell(Aethers.Notebook.Model.NeighbouringCell instance);
    partial void UpdateNeighbouringCell(Aethers.Notebook.Model.NeighbouringCell instance);
    partial void DeleteNeighbouringCell(Aethers.Notebook.Model.NeighbouringCell instance);
    partial void DeletePositionLocationChanged(Aethers.Notebook.Model.PositionLocationChanged instance);
    partial void InsertPositionProviderEnabledDisabled(Aethers.Notebook.Model.PositionProviderEnabledDisabled instance);
    partial void UpdatePositionProviderEnabledDisabled(Aethers.Notebook.Model.PositionProviderEnabledDisabled instance);
    partial void DeletePositionProviderEnabledDisabled(Aethers.Notebook.Model.PositionProviderEnabledDisabled instance);
    partial void InsertTimestamp(Aethers.Notebook.Model.Timestamp instance);
    partial void UpdateTimestamp(Aethers.Notebook.Model.Timestamp instance);
    partial void DeleteTimestamp(Aethers.Notebook.Model.Timestamp instance);
    partial void InsertPositionStatusChanged(Aethers.Notebook.Model.PositionStatusChanged instance);
    partial void UpdatePositionStatusChanged(Aethers.Notebook.Model.PositionStatusChanged instance);
    partial void DeletePositionStatusChanged(Aethers.Notebook.Model.PositionStatusChanged instance);
    partial void InsertServiceState(Aethers.Notebook.Model.ServiceState instance);
    partial void UpdateServiceState(Aethers.Notebook.Model.ServiceState instance);
    partial void DeleteServiceState(Aethers.Notebook.Model.ServiceState instance);
    partial void InsertSignalStrength(Aethers.Notebook.Model.SignalStrength instance);
    partial void UpdateSignalStrength(Aethers.Notebook.Model.SignalStrength instance);
    partial void DeleteSignalStrength(Aethers.Notebook.Model.SignalStrength instance);
    partial void InsertWifiScanResult(Aethers.Notebook.Model.WifiScanResult instance);
    partial void UpdateWifiScanResult(Aethers.Notebook.Model.WifiScanResult instance);
    partial void DeleteWifiScanResult(Aethers.Notebook.Model.WifiScanResult instance);
    partial void InsertUnrecognised(Aethers.Notebook.Model.Unrecognised instance);
    partial void UpdateUnrecognised(Aethers.Notebook.Model.Unrecognised instance);
    partial void DeleteUnrecognised(Aethers.Notebook.Model.Unrecognised instance);
    partial void InsertUser(Aethers.Notebook.Model.User instance);
    partial void UpdateUser(Aethers.Notebook.Model.User instance);
    partial void DeleteUser(Aethers.Notebook.Model.User instance);
    #endregion
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.CdmaCellLocation> CdmaCellLocations
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.CdmaCellLocation>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.GsmCellLocation> GsmCellLocations
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.GsmCellLocation>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.DataConnectionState> DataConnectionStates
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.DataConnectionState>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.Location> Locations
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.Location>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.LogEntry> LogEntries
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.LogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.NeighbouringCells> NeighbouringCells
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.NeighbouringCells>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.LoggerIdentifier> LoggerIdentifiers
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.LoggerIdentifier>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.NeighbouringCell> NeighbouringCells1
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.NeighbouringCell>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.PositionLocationChanged> PositionLocationChangeds
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.PositionLocationChanged>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.PositionProviderEnabledDisabled> PositionProviderEnabledDisableds
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.PositionProviderEnabledDisabled>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.Timestamp> Timestamps
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.Timestamp>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.PositionStatusChanged> PositionStatusChangeds
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.PositionStatusChanged>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.ServiceState> ServiceStates
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.ServiceState>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.SignalStrength> SignalStrengths
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.SignalStrength>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.WifiScanResult> WifiScanResults
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.WifiScanResult>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.Unrecognised> Unrecogniseds
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.Unrecognised>();
			}
		}
		
		public System.Data.Linq.Table<Aethers.Notebook.Model.User> Users
		{
			get
			{
				return this.GetTable<Aethers.Notebook.Model.User>();
			}
		}
		
		private void InsertLocation(Aethers.Notebook.Model.Location obj)
		{
			System.Nullable<long> p1 = obj.ID;
			this.InsertLocation(ref p1, ((System.Nullable<double>)(obj.accuracy)), ((System.Nullable<double>)(obj.altitude)), ((System.Nullable<double>)(obj.bearing)), obj.extras, obj.provider, ((System.Nullable<double>)(obj.speed)), ((System.Nullable<long>)(obj.time)), ((System.Nullable<double>)(obj.latitude)), ((System.Nullable<double>)(obj.longitude)));
			obj.ID = p1.GetValueOrDefault();
		}
		
		private void UpdateLocation(Aethers.Notebook.Model.Location obj)
		{
			this.UpdateLocation(((System.Nullable<long>)(obj.ID)), ((System.Nullable<double>)(obj.accuracy)), ((System.Nullable<double>)(obj.altitude)), ((System.Nullable<double>)(obj.bearing)), obj.extras, obj.provider, ((System.Nullable<double>)(obj.speed)), ((System.Nullable<long>)(obj.time)), ((System.Nullable<double>)(obj.latitude)), ((System.Nullable<double>)(obj.longitude)));
		}
		
		private void InsertPositionLocationChanged(Aethers.Notebook.Model.PositionLocationChanged obj)
		{
			System.Nullable<long> p1 = obj.ID;
			this.InsertPositionLocationChanged(ref p1, obj.provider, ((System.Nullable<double>)(obj.accuracy)), ((System.Nullable<double>)(obj.altitude)), ((System.Nullable<double>)(obj.bearing)), ((System.Nullable<double>)(obj.speed)), ((System.Nullable<long>)(obj.time)), obj.extras, ((System.Nullable<long>)(obj.logEntryID)), ((System.Nullable<double>)(obj.latitude)), ((System.Nullable<double>)(obj.longitude)));
			obj.ID = p1.GetValueOrDefault();
		}
		
		private void UpdatePositionLocationChanged(Aethers.Notebook.Model.PositionLocationChanged obj)
		{
			this.UpdatePositionLocationChanged(((System.Nullable<long>)(obj.ID)), obj.provider, ((System.Nullable<double>)(obj.accuracy)), ((System.Nullable<double>)(obj.altitude)), ((System.Nullable<double>)(obj.bearing)), ((System.Nullable<double>)(obj.speed)), ((System.Nullable<long>)(obj.time)), obj.extras, ((System.Nullable<long>)(obj.logEntryID)), ((System.Nullable<double>)(obj.latitude)), ((System.Nullable<double>)(obj.longitude)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertLocation")]
		public int InsertLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="BigInt")] ref System.Nullable<long> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> accuracy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> altitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> bearing, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Text")] string extras, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string provider, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> speed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> time, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, accuracy, altitude, bearing, extras, provider, speed, time, latitude, longitude);
			iD = ((System.Nullable<long>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertPositionLocationChanged")]
		public int InsertPositionLocationChanged([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="BigInt")] ref System.Nullable<long> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string provider, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> accuracy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> altitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> bearing, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> speed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> time, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Text")] string extras, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> logEntryID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, provider, accuracy, altitude, bearing, speed, time, extras, logEntryID, latitude, longitude);
			iD = ((System.Nullable<long>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdatePositionLocationChanged")]
		public int UpdatePositionLocationChanged([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="BigInt")] System.Nullable<long> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string provider, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> accuracy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> altitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> bearing, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> speed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> time, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Text")] string extras, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> logEntryID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, provider, accuracy, altitude, bearing, speed, time, extras, logEntryID, latitude, longitude);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLocation")]
		public int UpdateLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="BigInt")] System.Nullable<long> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> accuracy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> altitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> bearing, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Text")] string extras, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string provider, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> speed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> time, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, accuracy, altitude, bearing, extras, provider, speed, time, latitude, longitude);
			return ((int)(result.ReturnValue));
		}
	}
}
namespace Aethers.Notebook.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdmaCellLocation")]
	public partial class CdmaCellLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _baseStationId;
		
		private int _baseStationLatitude;
		
		private int _baseStationLongitude;
		
		private int _networkId;
		
		private int _systemId;
		
		private System.Nullable<long> _neighbouringCellsID;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
		private EntityRef<NeighbouringCells> _NeighbouringCells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnbaseStationIdChanging(int value);
    partial void OnbaseStationIdChanged();
    partial void OnbaseStationLatitudeChanging(int value);
    partial void OnbaseStationLatitudeChanged();
    partial void OnbaseStationLongitudeChanging(int value);
    partial void OnbaseStationLongitudeChanged();
    partial void OnnetworkIdChanging(int value);
    partial void OnnetworkIdChanged();
    partial void OnsystemIdChanging(int value);
    partial void OnsystemIdChanged();
    partial void OnneighbouringCellsIDChanging(System.Nullable<long> value);
    partial void OnneighbouringCellsIDChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public CdmaCellLocation()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			this._NeighbouringCells = default(EntityRef<NeighbouringCells>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationId", DbType="Int NOT NULL")]
		public int baseStationId
		{
			get
			{
				return this._baseStationId;
			}
			set
			{
				if ((this._baseStationId != value))
				{
					this.OnbaseStationIdChanging(value);
					this.SendPropertyChanging();
					this._baseStationId = value;
					this.SendPropertyChanged("baseStationId");
					this.OnbaseStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationLatitude", DbType="Int NOT NULL")]
		public int baseStationLatitude
		{
			get
			{
				return this._baseStationLatitude;
			}
			set
			{
				if ((this._baseStationLatitude != value))
				{
					this.OnbaseStationLatitudeChanging(value);
					this.SendPropertyChanging();
					this._baseStationLatitude = value;
					this.SendPropertyChanged("baseStationLatitude");
					this.OnbaseStationLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationLongitude", DbType="Int NOT NULL")]
		public int baseStationLongitude
		{
			get
			{
				return this._baseStationLongitude;
			}
			set
			{
				if ((this._baseStationLongitude != value))
				{
					this.OnbaseStationLongitudeChanging(value);
					this.SendPropertyChanging();
					this._baseStationLongitude = value;
					this.SendPropertyChanged("baseStationLongitude");
					this.OnbaseStationLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkId", DbType="Int NOT NULL")]
		public int networkId
		{
			get
			{
				return this._networkId;
			}
			set
			{
				if ((this._networkId != value))
				{
					this.OnnetworkIdChanging(value);
					this.SendPropertyChanging();
					this._networkId = value;
					this.SendPropertyChanged("networkId");
					this.OnnetworkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemId", DbType="Int NOT NULL")]
		public int systemId
		{
			get
			{
				return this._systemId;
			}
			set
			{
				if ((this._systemId != value))
				{
					this.OnsystemIdChanging(value);
					this.SendPropertyChanging();
					this._systemId = value;
					this.SendPropertyChanged("systemId");
					this.OnsystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_neighbouringCellsID", DbType="BigInt")]
		public System.Nullable<long> neighbouringCellsID
		{
			get
			{
				return this._neighbouringCellsID;
			}
			set
			{
				if ((this._neighbouringCellsID != value))
				{
					if (this._NeighbouringCells.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnneighbouringCellsIDChanging(value);
					this.SendPropertyChanging();
					this._neighbouringCellsID = value;
					this.SendPropertyChanged("neighbouringCellsID");
					this.OnneighbouringCellsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_CdmaCellLocation", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.CdmaCellLocations.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.CdmaCellLocations.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_CdmaCellLocation", Storage="_NeighbouringCells", ThisKey="neighbouringCellsID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public NeighbouringCells NeighbouringCells
		{
			get
			{
				return this._NeighbouringCells.Entity;
			}
			set
			{
				NeighbouringCells previousValue = this._NeighbouringCells.Entity;
				if (((previousValue != value) 
							|| (this._NeighbouringCells.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NeighbouringCells.Entity = null;
						previousValue.CdmaCellLocations.Remove(this);
					}
					this._NeighbouringCells.Entity = value;
					if ((value != null))
					{
						value.CdmaCellLocations.Add(this);
						this._neighbouringCellsID = value.ID;
					}
					else
					{
						this._neighbouringCellsID = default(Nullable<long>);
					}
					this.SendPropertyChanged("NeighbouringCells");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GsmCellLocation")]
	public partial class GsmCellLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _cid;
		
		private int _lac;
		
		private System.Nullable<long> _neighbouringCellsID;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
		private EntityRef<NeighbouringCells> _NeighbouringCells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncidChanging(int value);
    partial void OncidChanged();
    partial void OnlacChanging(int value);
    partial void OnlacChanged();
    partial void OnneighbouringCellsIDChanging(System.Nullable<long> value);
    partial void OnneighbouringCellsIDChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public GsmCellLocation()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			this._NeighbouringCells = default(EntityRef<NeighbouringCells>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cid", DbType="Int NOT NULL")]
		public int cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lac", DbType="Int NOT NULL")]
		public int lac
		{
			get
			{
				return this._lac;
			}
			set
			{
				if ((this._lac != value))
				{
					this.OnlacChanging(value);
					this.SendPropertyChanging();
					this._lac = value;
					this.SendPropertyChanged("lac");
					this.OnlacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_neighbouringCellsID", DbType="BigInt")]
		public System.Nullable<long> neighbouringCellsID
		{
			get
			{
				return this._neighbouringCellsID;
			}
			set
			{
				if ((this._neighbouringCellsID != value))
				{
					if (this._NeighbouringCells.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnneighbouringCellsIDChanging(value);
					this.SendPropertyChanging();
					this._neighbouringCellsID = value;
					this.SendPropertyChanged("neighbouringCellsID");
					this.OnneighbouringCellsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_GsmCellLocation", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.GsmCellLocations.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.GsmCellLocations.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_GsmCellLocation", Storage="_NeighbouringCells", ThisKey="neighbouringCellsID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public NeighbouringCells NeighbouringCells
		{
			get
			{
				return this._NeighbouringCells.Entity;
			}
			set
			{
				NeighbouringCells previousValue = this._NeighbouringCells.Entity;
				if (((previousValue != value) 
							|| (this._NeighbouringCells.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NeighbouringCells.Entity = null;
						previousValue.GsmCellLocations.Remove(this);
					}
					this._NeighbouringCells.Entity = value;
					if ((value != null))
					{
						value.GsmCellLocations.Add(this);
						this._neighbouringCellsID = value.ID;
					}
					else
					{
						this._neighbouringCellsID = default(Nullable<long>);
					}
					this.SendPropertyChanged("NeighbouringCells");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataConnectionState")]
	public partial class DataConnectionState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _state;
		
		private string _networkType;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnnetworkTypeChanging(string value);
    partial void OnnetworkTypeChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public DataConnectionState()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string networkType
		{
			get
			{
				return this._networkType;
			}
			set
			{
				if ((this._networkType != value))
				{
					this.OnnetworkTypeChanging(value);
					this.SendPropertyChanging();
					this._networkType = value;
					this.SendPropertyChanged("networkType");
					this.OnnetworkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_DataConnectionState", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.DataConnectionStates.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.DataConnectionStates.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Data.Linq.Binary _positionBinary;
		
		private System.Nullable<double> _accuracy;
		
		private System.Nullable<double> _altitude;
		
		private System.Nullable<double> _bearing;
		
		private string _extras;
		
		private string _provider;
		
		private System.Nullable<double> _speed;
		
		private System.Nullable<long> _time;
		
		private double _latitude;
		
		private double _longitude;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpositionBinaryChanging(System.Data.Linq.Binary value);
    partial void OnpositionBinaryChanged();
    partial void OnaccuracyChanging(System.Nullable<double> value);
    partial void OnaccuracyChanged();
    partial void OnaltitudeChanging(System.Nullable<double> value);
    partial void OnaltitudeChanged();
    partial void OnbearingChanging(System.Nullable<double> value);
    partial void OnbearingChanged();
    partial void OnextrasChanging(string value);
    partial void OnextrasChanged();
    partial void OnproviderChanging(string value);
    partial void OnproviderChanged();
    partial void OnspeedChanging(System.Nullable<double> value);
    partial void OnspeedChanged();
    partial void OntimeChanging(System.Nullable<long> value);
    partial void OntimeChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    #endregion
		
		public Location()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionBinary", AutoSync=AutoSync.Always, DbType="VarBinary(MAX)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary positionBinary
		{
			get
			{
				return this._positionBinary;
			}
			set
			{
				if ((this._positionBinary != value))
				{
					this.OnpositionBinaryChanging(value);
					this.SendPropertyChanging();
					this._positionBinary = value;
					this.SendPropertyChanged("positionBinary");
					this.OnpositionBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accuracy", DbType="Float")]
		public System.Nullable<double> accuracy
		{
			get
			{
				return this._accuracy;
			}
			set
			{
				if ((this._accuracy != value))
				{
					this.OnaccuracyChanging(value);
					this.SendPropertyChanging();
					this._accuracy = value;
					this.SendPropertyChanged("accuracy");
					this.OnaccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altitude", DbType="Float")]
		public System.Nullable<double> altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				if ((this._altitude != value))
				{
					this.OnaltitudeChanging(value);
					this.SendPropertyChanging();
					this._altitude = value;
					this.SendPropertyChanged("altitude");
					this.OnaltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bearing", DbType="Float")]
		public System.Nullable<double> bearing
		{
			get
			{
				return this._bearing;
			}
			set
			{
				if ((this._bearing != value))
				{
					this.OnbearingChanging(value);
					this.SendPropertyChanging();
					this._bearing = value;
					this.SendPropertyChanged("bearing");
					this.OnbearingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extras", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string extras
		{
			get
			{
				return this._extras;
			}
			set
			{
				if ((this._extras != value))
				{
					this.OnextrasChanging(value);
					this.SendPropertyChanging();
					this._extras = value;
					this.SendPropertyChanged("extras");
					this.OnextrasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provider", DbType="NVarChar(MAX)")]
		public string provider
		{
			get
			{
				return this._provider;
			}
			set
			{
				if ((this._provider != value))
				{
					this.OnproviderChanging(value);
					this.SendPropertyChanging();
					this._provider = value;
					this.SendPropertyChanged("provider");
					this.OnproviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speed", DbType="Float")]
		public System.Nullable<double> speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				if ((this._speed != value))
				{
					this.OnspeedChanging(value);
					this.SendPropertyChanging();
					this._speed = value;
					this.SendPropertyChanged("speed");
					this.OnspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="BigInt")]
		public System.Nullable<long> time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="locationID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogEntry")]
	public partial class LogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _loggerIdentifierID;
		
		private long _timestampID;
		
		private System.Nullable<long> _locationID;
		
		private long _logEntryID;
		
		private EntitySet<CdmaCellLocation> _CdmaCellLocations;
		
		private EntitySet<GsmCellLocation> _GsmCellLocations;
		
		private EntitySet<DataConnectionState> _DataConnectionStates;
		
		private EntitySet<PositionLocationChanged> _PositionLocationChangeds;
		
		private EntitySet<PositionProviderEnabledDisabled> _PositionProviderEnabledDisableds;
		
		private EntitySet<PositionStatusChanged> _PositionStatusChangeds;
		
		private EntitySet<ServiceState> _ServiceStates;
		
		private EntitySet<SignalStrength> _SignalStrengths;
		
		private EntitySet<WifiScanResult> _WifiScanResults;
		
		private EntitySet<Unrecognised> _Unrecogniseds;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<LoggerIdentifier> _LoggerIdentifier;
		
		private EntityRef<Timestamp> _Timestamp;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnloggerIdentifierIDChanging(long value);
    partial void OnloggerIdentifierIDChanged();
    partial void OntimestampIDChanging(long value);
    partial void OntimestampIDChanged();
    partial void OnlocationIDChanging(System.Nullable<long> value);
    partial void OnlocationIDChanged();
    partial void OnuserIDChanging(long value);
    partial void OnuserIDChanged();
    #endregion
		
		public LogEntry()
		{
			this._CdmaCellLocations = new EntitySet<CdmaCellLocation>(new Action<CdmaCellLocation>(this.attach_CdmaCellLocations), new Action<CdmaCellLocation>(this.detach_CdmaCellLocations));
			this._GsmCellLocations = new EntitySet<GsmCellLocation>(new Action<GsmCellLocation>(this.attach_GsmCellLocations), new Action<GsmCellLocation>(this.detach_GsmCellLocations));
			this._DataConnectionStates = new EntitySet<DataConnectionState>(new Action<DataConnectionState>(this.attach_DataConnectionStates), new Action<DataConnectionState>(this.detach_DataConnectionStates));
			this._PositionLocationChangeds = new EntitySet<PositionLocationChanged>(new Action<PositionLocationChanged>(this.attach_PositionLocationChangeds), new Action<PositionLocationChanged>(this.detach_PositionLocationChangeds));
			this._PositionProviderEnabledDisableds = new EntitySet<PositionProviderEnabledDisabled>(new Action<PositionProviderEnabledDisabled>(this.attach_PositionProviderEnabledDisableds), new Action<PositionProviderEnabledDisabled>(this.detach_PositionProviderEnabledDisableds));
			this._PositionStatusChangeds = new EntitySet<PositionStatusChanged>(new Action<PositionStatusChanged>(this.attach_PositionStatusChangeds), new Action<PositionStatusChanged>(this.detach_PositionStatusChangeds));
			this._ServiceStates = new EntitySet<ServiceState>(new Action<ServiceState>(this.attach_ServiceStates), new Action<ServiceState>(this.detach_ServiceStates));
			this._SignalStrengths = new EntitySet<SignalStrength>(new Action<SignalStrength>(this.attach_SignalStrengths), new Action<SignalStrength>(this.detach_SignalStrengths));
			this._WifiScanResults = new EntitySet<WifiScanResult>(new Action<WifiScanResult>(this.attach_WifiScanResults), new Action<WifiScanResult>(this.detach_WifiScanResults));
			this._Unrecogniseds = new EntitySet<Unrecognised>(new Action<Unrecognised>(this.attach_Unrecogniseds), new Action<Unrecognised>(this.detach_Unrecogniseds));
			this._Location = default(EntityRef<Location>);
			this._LoggerIdentifier = default(EntityRef<LoggerIdentifier>);
			this._Timestamp = default(EntityRef<Timestamp>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loggerIdentifierID", DbType="BigInt NOT NULL")]
		public long loggerIdentifierID
		{
			get
			{
				return this._loggerIdentifierID;
			}
			set
			{
				if ((this._loggerIdentifierID != value))
				{
					if (this._LoggerIdentifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnloggerIdentifierIDChanging(value);
					this.SendPropertyChanging();
					this._loggerIdentifierID = value;
					this.SendPropertyChanged("loggerIdentifierID");
					this.OnloggerIdentifierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestampID", DbType="BigInt NOT NULL")]
		public long timestampID
		{
			get
			{
				return this._timestampID;
			}
			set
			{
				if ((this._timestampID != value))
				{
					if (this._Timestamp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntimestampIDChanging(value);
					this.SendPropertyChanging();
					this._timestampID = value;
					this.SendPropertyChanged("timestampID");
					this.OntimestampIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationID", DbType="BigInt")]
		public System.Nullable<long> locationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if ((this._locationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocationIDChanging(value);
					this.SendPropertyChanging();
					this._locationID = value;
					this.SendPropertyChanged("locationID");
					this.OnlocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long userID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_CdmaCellLocation", Storage="_CdmaCellLocations", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<CdmaCellLocation> CdmaCellLocations
		{
			get
			{
				return this._CdmaCellLocations;
			}
			set
			{
				this._CdmaCellLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_GsmCellLocation", Storage="_GsmCellLocations", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<GsmCellLocation> GsmCellLocations
		{
			get
			{
				return this._GsmCellLocations;
			}
			set
			{
				this._GsmCellLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_DataConnectionState", Storage="_DataConnectionStates", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<DataConnectionState> DataConnectionStates
		{
			get
			{
				return this._DataConnectionStates;
			}
			set
			{
				this._DataConnectionStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionLocationChanged", Storage="_PositionLocationChangeds", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<PositionLocationChanged> PositionLocationChangeds
		{
			get
			{
				return this._PositionLocationChangeds;
			}
			set
			{
				this._PositionLocationChangeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionProviderEnabledDisabled", Storage="_PositionProviderEnabledDisableds", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<PositionProviderEnabledDisabled> PositionProviderEnabledDisableds
		{
			get
			{
				return this._PositionProviderEnabledDisableds;
			}
			set
			{
				this._PositionProviderEnabledDisableds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionStatusChanged", Storage="_PositionStatusChangeds", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<PositionStatusChanged> PositionStatusChangeds
		{
			get
			{
				return this._PositionStatusChangeds;
			}
			set
			{
				this._PositionStatusChangeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_ServiceState", Storage="_ServiceStates", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<ServiceState> ServiceStates
		{
			get
			{
				return this._ServiceStates;
			}
			set
			{
				this._ServiceStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_SignalStrength", Storage="_SignalStrengths", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<SignalStrength> SignalStrengths
		{
			get
			{
				return this._SignalStrengths;
			}
			set
			{
				this._SignalStrengths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_WifiScanResult", Storage="_WifiScanResults", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<WifiScanResult> WifiScanResults
		{
			get
			{
				return this._WifiScanResults;
			}
			set
			{
				this._WifiScanResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_Unrecognised", Storage="_Unrecogniseds", ThisKey="ID", OtherKey="logEntryID")]
		public EntitySet<Unrecognised> Unrecogniseds
		{
			get
			{
				return this._Unrecogniseds;
			}
			set
			{
				this._Unrecogniseds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LogEntry", Storage="_Location", ThisKey="locationID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._locationID = value.ID;
					}
					else
					{
						this._locationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoggerIdentifier_LogEntry", Storage="_LoggerIdentifier", ThisKey="loggerIdentifierID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LoggerIdentifier LoggerIdentifier
		{
			get
			{
				return this._LoggerIdentifier.Entity;
			}
			set
			{
				LoggerIdentifier previousValue = this._LoggerIdentifier.Entity;
				if (((previousValue != value) 
							|| (this._LoggerIdentifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoggerIdentifier.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._LoggerIdentifier.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._loggerIdentifierID = value.ID;
					}
					else
					{
						this._loggerIdentifierID = default(long);
					}
					this.SendPropertyChanged("LoggerIdentifier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timestamp_LogEntry", Storage="_Timestamp", ThisKey="timestampID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Timestamp Timestamp
		{
			get
			{
				return this._Timestamp.Entity;
			}
			set
			{
				Timestamp previousValue = this._Timestamp.Entity;
				if (((previousValue != value) 
							|| (this._Timestamp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Timestamp.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._Timestamp.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._timestampID = value.ID;
					}
					else
					{
						this._timestampID = default(long);
					}
					this.SendPropertyChanged("Timestamp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LogEntry", Storage="_User", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CdmaCellLocations(CdmaCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_CdmaCellLocations(CdmaCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_GsmCellLocations(GsmCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_GsmCellLocations(GsmCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_DataConnectionStates(DataConnectionState entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_DataConnectionStates(DataConnectionState entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_PositionLocationChangeds(PositionLocationChanged entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_PositionLocationChangeds(PositionLocationChanged entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_PositionProviderEnabledDisableds(PositionProviderEnabledDisabled entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_PositionProviderEnabledDisableds(PositionProviderEnabledDisabled entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_PositionStatusChangeds(PositionStatusChanged entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_PositionStatusChangeds(PositionStatusChanged entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_SignalStrengths(SignalStrength entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_SignalStrengths(SignalStrength entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_WifiScanResults(WifiScanResult entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_WifiScanResults(WifiScanResult entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
		
		private void attach_Unrecogniseds(Unrecognised entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_Unrecogniseds(Unrecognised entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NeighbouringCells")]
	public partial class NeighbouringCells : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private EntitySet<CdmaCellLocation> _CdmaCellLocations;
		
		private EntitySet<GsmCellLocation> _GsmCellLocations;
		
		private EntitySet<NeighbouringCell> _NeighbouringCells1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    #endregion
		
		public NeighbouringCells()
		{
			this._CdmaCellLocations = new EntitySet<CdmaCellLocation>(new Action<CdmaCellLocation>(this.attach_CdmaCellLocations), new Action<CdmaCellLocation>(this.detach_CdmaCellLocations));
			this._GsmCellLocations = new EntitySet<GsmCellLocation>(new Action<GsmCellLocation>(this.attach_GsmCellLocations), new Action<GsmCellLocation>(this.detach_GsmCellLocations));
			this._NeighbouringCells1 = new EntitySet<NeighbouringCell>(new Action<NeighbouringCell>(this.attach_NeighbouringCells1), new Action<NeighbouringCell>(this.detach_NeighbouringCells1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_CdmaCellLocation", Storage="_CdmaCellLocations", ThisKey="ID", OtherKey="neighbouringCellsID")]
		public EntitySet<CdmaCellLocation> CdmaCellLocations
		{
			get
			{
				return this._CdmaCellLocations;
			}
			set
			{
				this._CdmaCellLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_GsmCellLocation", Storage="_GsmCellLocations", ThisKey="ID", OtherKey="neighbouringCellsID")]
		public EntitySet<GsmCellLocation> GsmCellLocations
		{
			get
			{
				return this._GsmCellLocations;
			}
			set
			{
				this._GsmCellLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_NeighbouringCell", Storage="_NeighbouringCells1", ThisKey="ID", OtherKey="neighbouringCellsID")]
		public EntitySet<NeighbouringCell> NeighbouringCells1
		{
			get
			{
				return this._NeighbouringCells1;
			}
			set
			{
				this._NeighbouringCells1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CdmaCellLocations(CdmaCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = this;
		}
		
		private void detach_CdmaCellLocations(CdmaCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = null;
		}
		
		private void attach_GsmCellLocations(GsmCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = this;
		}
		
		private void detach_GsmCellLocations(GsmCellLocation entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = null;
		}
		
		private void attach_NeighbouringCells1(NeighbouringCell entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = this;
		}
		
		private void detach_NeighbouringCells1(NeighbouringCell entity)
		{
			this.SendPropertyChanging();
			entity.NeighbouringCells = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoggerIdentifier")]
	public partial class LoggerIdentifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _uniqueID;
		
		private int _version;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnuniqueIDChanging(string value);
    partial void OnuniqueIDChanged();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    #endregion
		
		public LoggerIdentifier()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uniqueID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string uniqueID
		{
			get
			{
				return this._uniqueID;
			}
			set
			{
				if ((this._uniqueID != value))
				{
					this.OnuniqueIDChanging(value);
					this.SendPropertyChanging();
					this._uniqueID = value;
					this.SendPropertyChanged("uniqueID");
					this.OnuniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int NOT NULL")]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoggerIdentifier_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="loggerIdentifierID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LoggerIdentifier = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LoggerIdentifier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NeighbouringCell")]
	public partial class NeighbouringCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _cid;
		
		private int _lac;
		
		private int _psc;
		
		private int _rssi;
		
		private string _networkType;
		
		private long _neighbouringCellsID;
		
		private EntityRef<NeighbouringCells> _NeighbouringCells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncidChanging(int value);
    partial void OncidChanged();
    partial void OnlacChanging(int value);
    partial void OnlacChanged();
    partial void OnpscChanging(int value);
    partial void OnpscChanged();
    partial void OnrssiChanging(int value);
    partial void OnrssiChanged();
    partial void OnnetworkTypeChanging(string value);
    partial void OnnetworkTypeChanged();
    partial void OnneighbouringCellsIDChanging(long value);
    partial void OnneighbouringCellsIDChanged();
    #endregion
		
		public NeighbouringCell()
		{
			this._NeighbouringCells = default(EntityRef<NeighbouringCells>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cid", DbType="Int NOT NULL")]
		public int cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lac", DbType="Int NOT NULL")]
		public int lac
		{
			get
			{
				return this._lac;
			}
			set
			{
				if ((this._lac != value))
				{
					this.OnlacChanging(value);
					this.SendPropertyChanging();
					this._lac = value;
					this.SendPropertyChanged("lac");
					this.OnlacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_psc", DbType="Int NOT NULL")]
		public int psc
		{
			get
			{
				return this._psc;
			}
			set
			{
				if ((this._psc != value))
				{
					this.OnpscChanging(value);
					this.SendPropertyChanging();
					this._psc = value;
					this.SendPropertyChanged("psc");
					this.OnpscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rssi", DbType="Int NOT NULL")]
		public int rssi
		{
			get
			{
				return this._rssi;
			}
			set
			{
				if ((this._rssi != value))
				{
					this.OnrssiChanging(value);
					this.SendPropertyChanging();
					this._rssi = value;
					this.SendPropertyChanged("rssi");
					this.OnrssiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string networkType
		{
			get
			{
				return this._networkType;
			}
			set
			{
				if ((this._networkType != value))
				{
					this.OnnetworkTypeChanging(value);
					this.SendPropertyChanging();
					this._networkType = value;
					this.SendPropertyChanged("networkType");
					this.OnnetworkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_neighbouringCellsID", DbType="BigInt NOT NULL")]
		public long neighbouringCellsID
		{
			get
			{
				return this._neighbouringCellsID;
			}
			set
			{
				if ((this._neighbouringCellsID != value))
				{
					if (this._NeighbouringCells.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnneighbouringCellsIDChanging(value);
					this.SendPropertyChanging();
					this._neighbouringCellsID = value;
					this.SendPropertyChanged("neighbouringCellsID");
					this.OnneighbouringCellsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NeighbouringCells_NeighbouringCell", Storage="_NeighbouringCells", ThisKey="neighbouringCellsID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NeighbouringCells NeighbouringCells
		{
			get
			{
				return this._NeighbouringCells.Entity;
			}
			set
			{
				NeighbouringCells previousValue = this._NeighbouringCells.Entity;
				if (((previousValue != value) 
							|| (this._NeighbouringCells.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NeighbouringCells.Entity = null;
						previousValue.NeighbouringCells1.Remove(this);
					}
					this._NeighbouringCells.Entity = value;
					if ((value != null))
					{
						value.NeighbouringCells1.Add(this);
						this._neighbouringCellsID = value.ID;
					}
					else
					{
						this._neighbouringCellsID = default(long);
					}
					this.SendPropertyChanged("NeighbouringCells");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionLocationChanged")]
	public partial class PositionLocationChanged : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Data.Linq.Binary _positionBinary;
		
		private string _provider;
		
		private System.Nullable<double> _accuracy;
		
		private System.Nullable<double> _altitude;
		
		private System.Nullable<double> _bearing;
		
		private System.Nullable<double> _speed;
		
		private System.Nullable<long> _time;
		
		private string _extras;
		
		private long _logEntryID;
		
		private double _latitude;
		
		private double _longitude;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnpositionBinaryChanging(System.Data.Linq.Binary value);
    partial void OnpositionBinaryChanged();
    partial void OnproviderChanging(string value);
    partial void OnproviderChanged();
    partial void OnaccuracyChanging(System.Nullable<double> value);
    partial void OnaccuracyChanged();
    partial void OnaltitudeChanging(System.Nullable<double> value);
    partial void OnaltitudeChanged();
    partial void OnbearingChanging(System.Nullable<double> value);
    partial void OnbearingChanged();
    partial void OnspeedChanging(System.Nullable<double> value);
    partial void OnspeedChanged();
    partial void OntimeChanging(System.Nullable<long> value);
    partial void OntimeChanged();
    partial void OnextrasChanging(string value);
    partial void OnextrasChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    #endregion
		
		public PositionLocationChanged()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionBinary", AutoSync=AutoSync.Always, DbType="VarBinary(MAX)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary positionBinary
		{
			get
			{
				return this._positionBinary;
			}
			set
			{
				if ((this._positionBinary != value))
				{
					this.OnpositionBinaryChanging(value);
					this.SendPropertyChanging();
					this._positionBinary = value;
					this.SendPropertyChanged("positionBinary");
					this.OnpositionBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provider", DbType="NVarChar(MAX)")]
		public string provider
		{
			get
			{
				return this._provider;
			}
			set
			{
				if ((this._provider != value))
				{
					this.OnproviderChanging(value);
					this.SendPropertyChanging();
					this._provider = value;
					this.SendPropertyChanged("provider");
					this.OnproviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accuracy", DbType="Float")]
		public System.Nullable<double> accuracy
		{
			get
			{
				return this._accuracy;
			}
			set
			{
				if ((this._accuracy != value))
				{
					this.OnaccuracyChanging(value);
					this.SendPropertyChanging();
					this._accuracy = value;
					this.SendPropertyChanged("accuracy");
					this.OnaccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altitude", DbType="Float")]
		public System.Nullable<double> altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				if ((this._altitude != value))
				{
					this.OnaltitudeChanging(value);
					this.SendPropertyChanging();
					this._altitude = value;
					this.SendPropertyChanged("altitude");
					this.OnaltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bearing", DbType="Float")]
		public System.Nullable<double> bearing
		{
			get
			{
				return this._bearing;
			}
			set
			{
				if ((this._bearing != value))
				{
					this.OnbearingChanging(value);
					this.SendPropertyChanging();
					this._bearing = value;
					this.SendPropertyChanged("bearing");
					this.OnbearingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speed", DbType="Float")]
		public System.Nullable<double> speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				if ((this._speed != value))
				{
					this.OnspeedChanging(value);
					this.SendPropertyChanging();
					this._speed = value;
					this.SendPropertyChanged("speed");
					this.OnspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="BigInt")]
		public System.Nullable<long> time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extras", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string extras
		{
			get
			{
				return this._extras;
			}
			set
			{
				if ((this._extras != value))
				{
					this.OnextrasChanging(value);
					this.SendPropertyChanging();
					this._extras = value;
					this.SendPropertyChanged("extras");
					this.OnextrasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionLocationChanged", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.PositionLocationChangeds.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.PositionLocationChangeds.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionProviderEnabledDisabled")]
	public partial class PositionProviderEnabledDisabled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private bool _isEnabled;
		
		private string _provider;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnisEnabledChanging(bool value);
    partial void OnisEnabledChanged();
    partial void OnproviderChanging(string value);
    partial void OnproviderChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public PositionProviderEnabledDisabled()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnabled", DbType="Bit NOT NULL")]
		public bool isEnabled
		{
			get
			{
				return this._isEnabled;
			}
			set
			{
				if ((this._isEnabled != value))
				{
					this.OnisEnabledChanging(value);
					this.SendPropertyChanging();
					this._isEnabled = value;
					this.SendPropertyChanged("isEnabled");
					this.OnisEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provider", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string provider
		{
			get
			{
				return this._provider;
			}
			set
			{
				if ((this._provider != value))
				{
					this.OnproviderChanging(value);
					this.SendPropertyChanging();
					this._provider = value;
					this.SendPropertyChanged("provider");
					this.OnproviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionProviderEnabledDisabled", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.PositionProviderEnabledDisableds.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.PositionProviderEnabledDisableds.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Timestamp")]
	public partial class Timestamp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _systemTime;
		
		private string _timezone;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnsystemTimeChanging(long value);
    partial void OnsystemTimeChanged();
    partial void OntimezoneChanging(string value);
    partial void OntimezoneChanged();
    #endregion
		
		public Timestamp()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemTime", DbType="BigInt NOT NULL")]
		public long systemTime
		{
			get
			{
				return this._systemTime;
			}
			set
			{
				if ((this._systemTime != value))
				{
					this.OnsystemTimeChanging(value);
					this.SendPropertyChanging();
					this._systemTime = value;
					this.SendPropertyChanged("systemTime");
					this.OnsystemTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timezone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string timezone
		{
			get
			{
				return this._timezone;
			}
			set
			{
				if ((this._timezone != value))
				{
					this.OntimezoneChanging(value);
					this.SendPropertyChanging();
					this._timezone = value;
					this.SendPropertyChanged("timezone");
					this.OntimezoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timestamp_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="timestampID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Timestamp = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Timestamp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionStatusChanged")]
	public partial class PositionStatusChanged : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _provider;
		
		private string _status;
		
		private string _extras;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnproviderChanging(string value);
    partial void OnproviderChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnextrasChanging(string value);
    partial void OnextrasChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public PositionStatusChanged()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provider", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string provider
		{
			get
			{
				return this._provider;
			}
			set
			{
				if ((this._provider != value))
				{
					this.OnproviderChanging(value);
					this.SendPropertyChanging();
					this._provider = value;
					this.SendPropertyChanged("provider");
					this.OnproviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extras", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string extras
		{
			get
			{
				return this._extras;
			}
			set
			{
				if ((this._extras != value))
				{
					this.OnextrasChanging(value);
					this.SendPropertyChanging();
					this._extras = value;
					this.SendPropertyChanged("extras");
					this.OnextrasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_PositionStatusChanged", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.PositionStatusChangeds.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.PositionStatusChangeds.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceState")]
	public partial class ServiceState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private bool _isManualSelection;
		
		private string _operatorAlphaLong;
		
		private string _operatorAlphaShort;
		
		private string _operatorNumeric;
		
		private bool _roaming;
		
		private string _state;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnisManualSelectionChanging(bool value);
    partial void OnisManualSelectionChanged();
    partial void OnoperatorAlphaLongChanging(string value);
    partial void OnoperatorAlphaLongChanged();
    partial void OnoperatorAlphaShortChanging(string value);
    partial void OnoperatorAlphaShortChanged();
    partial void OnoperatorNumericChanging(string value);
    partial void OnoperatorNumericChanged();
    partial void OnroamingChanging(bool value);
    partial void OnroamingChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public ServiceState()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isManualSelection", DbType="Bit NOT NULL")]
		public bool isManualSelection
		{
			get
			{
				return this._isManualSelection;
			}
			set
			{
				if ((this._isManualSelection != value))
				{
					this.OnisManualSelectionChanging(value);
					this.SendPropertyChanging();
					this._isManualSelection = value;
					this.SendPropertyChanged("isManualSelection");
					this.OnisManualSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorAlphaLong", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string operatorAlphaLong
		{
			get
			{
				return this._operatorAlphaLong;
			}
			set
			{
				if ((this._operatorAlphaLong != value))
				{
					this.OnoperatorAlphaLongChanging(value);
					this.SendPropertyChanging();
					this._operatorAlphaLong = value;
					this.SendPropertyChanged("operatorAlphaLong");
					this.OnoperatorAlphaLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorAlphaShort", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string operatorAlphaShort
		{
			get
			{
				return this._operatorAlphaShort;
			}
			set
			{
				if ((this._operatorAlphaShort != value))
				{
					this.OnoperatorAlphaShortChanging(value);
					this.SendPropertyChanging();
					this._operatorAlphaShort = value;
					this.SendPropertyChanged("operatorAlphaShort");
					this.OnoperatorAlphaShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorNumeric", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string operatorNumeric
		{
			get
			{
				return this._operatorNumeric;
			}
			set
			{
				if ((this._operatorNumeric != value))
				{
					this.OnoperatorNumericChanging(value);
					this.SendPropertyChanging();
					this._operatorNumeric = value;
					this.SendPropertyChanged("operatorNumeric");
					this.OnoperatorNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roaming", DbType="Bit NOT NULL")]
		public bool roaming
		{
			get
			{
				return this._roaming;
			}
			set
			{
				if ((this._roaming != value))
				{
					this.OnroamingChanging(value);
					this.SendPropertyChanging();
					this._roaming = value;
					this.SendPropertyChanged("roaming");
					this.OnroamingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_ServiceState", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.ServiceStates.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.ServiceStates.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignalStrength")]
	public partial class SignalStrength : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _cdmaDbm;
		
		private int _cdmaEcio;
		
		private int _evdoDbm;
		
		private int _evdoEcio;
		
		private int _evdoSnr;
		
		private int _gsmBitErrorRate;
		
		private int _gsmSignalStrength;
		
		private bool _isGsm;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OncdmaDbmChanging(int value);
    partial void OncdmaDbmChanged();
    partial void OncdmaEcioChanging(int value);
    partial void OncdmaEcioChanged();
    partial void OnevdoDbmChanging(int value);
    partial void OnevdoDbmChanged();
    partial void OnevdoEcioChanging(int value);
    partial void OnevdoEcioChanged();
    partial void OnevdoSnrChanging(int value);
    partial void OnevdoSnrChanged();
    partial void OngsmBitErrorRateChanging(int value);
    partial void OngsmBitErrorRateChanged();
    partial void OngsmSignalStrengthChanging(int value);
    partial void OngsmSignalStrengthChanged();
    partial void OnisGsmChanging(bool value);
    partial void OnisGsmChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public SignalStrength()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cdmaDbm", DbType="Int NOT NULL")]
		public int cdmaDbm
		{
			get
			{
				return this._cdmaDbm;
			}
			set
			{
				if ((this._cdmaDbm != value))
				{
					this.OncdmaDbmChanging(value);
					this.SendPropertyChanging();
					this._cdmaDbm = value;
					this.SendPropertyChanged("cdmaDbm");
					this.OncdmaDbmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cdmaEcio", DbType="Int NOT NULL")]
		public int cdmaEcio
		{
			get
			{
				return this._cdmaEcio;
			}
			set
			{
				if ((this._cdmaEcio != value))
				{
					this.OncdmaEcioChanging(value);
					this.SendPropertyChanging();
					this._cdmaEcio = value;
					this.SendPropertyChanged("cdmaEcio");
					this.OncdmaEcioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoDbm", DbType="Int NOT NULL")]
		public int evdoDbm
		{
			get
			{
				return this._evdoDbm;
			}
			set
			{
				if ((this._evdoDbm != value))
				{
					this.OnevdoDbmChanging(value);
					this.SendPropertyChanging();
					this._evdoDbm = value;
					this.SendPropertyChanged("evdoDbm");
					this.OnevdoDbmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoEcio", DbType="Int NOT NULL")]
		public int evdoEcio
		{
			get
			{
				return this._evdoEcio;
			}
			set
			{
				if ((this._evdoEcio != value))
				{
					this.OnevdoEcioChanging(value);
					this.SendPropertyChanging();
					this._evdoEcio = value;
					this.SendPropertyChanged("evdoEcio");
					this.OnevdoEcioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoSnr", DbType="Int NOT NULL")]
		public int evdoSnr
		{
			get
			{
				return this._evdoSnr;
			}
			set
			{
				if ((this._evdoSnr != value))
				{
					this.OnevdoSnrChanging(value);
					this.SendPropertyChanging();
					this._evdoSnr = value;
					this.SendPropertyChanged("evdoSnr");
					this.OnevdoSnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gsmBitErrorRate", DbType="Int NOT NULL")]
		public int gsmBitErrorRate
		{
			get
			{
				return this._gsmBitErrorRate;
			}
			set
			{
				if ((this._gsmBitErrorRate != value))
				{
					this.OngsmBitErrorRateChanging(value);
					this.SendPropertyChanging();
					this._gsmBitErrorRate = value;
					this.SendPropertyChanged("gsmBitErrorRate");
					this.OngsmBitErrorRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gsmSignalStrength", DbType="Int NOT NULL")]
		public int gsmSignalStrength
		{
			get
			{
				return this._gsmSignalStrength;
			}
			set
			{
				if ((this._gsmSignalStrength != value))
				{
					this.OngsmSignalStrengthChanging(value);
					this.SendPropertyChanging();
					this._gsmSignalStrength = value;
					this.SendPropertyChanged("gsmSignalStrength");
					this.OngsmSignalStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGsm", DbType="Bit NOT NULL")]
		public bool isGsm
		{
			get
			{
				return this._isGsm;
			}
			set
			{
				if ((this._isGsm != value))
				{
					this.OnisGsmChanging(value);
					this.SendPropertyChanging();
					this._isGsm = value;
					this.SendPropertyChanged("isGsm");
					this.OnisGsmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_SignalStrength", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.SignalStrengths.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.SignalStrengths.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WifiScanResult")]
	public partial class WifiScanResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _bssid;
		
		private string _ssid;
		
		private string _capabilities;
		
		private int _frequency;
		
		private int _level;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnbssidChanging(string value);
    partial void OnbssidChanged();
    partial void OnssidChanging(string value);
    partial void OnssidChanged();
    partial void OncapabilitiesChanging(string value);
    partial void OncapabilitiesChanged();
    partial void OnfrequencyChanging(int value);
    partial void OnfrequencyChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public WifiScanResult()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bssid", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string bssid
		{
			get
			{
				return this._bssid;
			}
			set
			{
				if ((this._bssid != value))
				{
					this.OnbssidChanging(value);
					this.SendPropertyChanging();
					this._bssid = value;
					this.SendPropertyChanged("bssid");
					this.OnbssidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssid", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ssid
		{
			get
			{
				return this._ssid;
			}
			set
			{
				if ((this._ssid != value))
				{
					this.OnssidChanging(value);
					this.SendPropertyChanging();
					this._ssid = value;
					this.SendPropertyChanged("ssid");
					this.OnssidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capabilities", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string capabilities
		{
			get
			{
				return this._capabilities;
			}
			set
			{
				if ((this._capabilities != value))
				{
					this.OncapabilitiesChanging(value);
					this.SendPropertyChanging();
					this._capabilities = value;
					this.SendPropertyChanged("capabilities");
					this.OncapabilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frequency", DbType="Int NOT NULL")]
		public int frequency
		{
			get
			{
				return this._frequency;
			}
			set
			{
				if ((this._frequency != value))
				{
					this.OnfrequencyChanging(value);
					this.SendPropertyChanging();
					this._frequency = value;
					this.SendPropertyChanged("frequency");
					this.OnfrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_WifiScanResult", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.WifiScanResults.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.WifiScanResults.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unrecognised")]
	public partial class Unrecognised : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _blobUri;
		
		private long _logEntryID;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnblobUriChanging(string value);
    partial void OnblobUriChanged();
    partial void OnlogEntryIDChanging(long value);
    partial void OnlogEntryIDChanged();
    #endregion
		
		public Unrecognised()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blobUri", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string blobUri
		{
			get
			{
				return this._blobUri;
			}
			set
			{
				if ((this._blobUri != value))
				{
					this.OnblobUriChanging(value);
					this.SendPropertyChanging();
					this._blobUri = value;
					this.SendPropertyChanged("blobUri");
					this.OnblobUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logEntryID", DbType="BigInt NOT NULL")]
		public long logEntryID
		{
			get
			{
				return this._logEntryID;
			}
			set
			{
				if ((this._logEntryID != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogEntryIDChanging(value);
					this.SendPropertyChanging();
					this._logEntryID = value;
					this.SendPropertyChanged("logEntryID");
					this.OnlogEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_Unrecognised", Storage="_LogEntry", ThisKey="logEntryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.Unrecogniseds.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.Unrecogniseds.Add(this);
						this._logEntryID = value.ID;
					}
					else
					{
						this._logEntryID = default(long);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _claimedIdentifier;
		
		private string _friendlyIdentifier;
		
		private string _secret;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnclaimedIdentifierChanging(string value);
    partial void OnclaimedIdentifierChanged();
    partial void OnfriendlyIdentifierChanging(string value);
    partial void OnfriendlyIdentifierChanged();
    partial void OnsecretChanging(string value);
    partial void OnsecretChanged();
    #endregion
		
		public User()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_claimedIdentifier", DbType="NVARCHAR(MAX) NOT NULL", CanBeNull=false)]
		public string claimedIdentifier
		{
			get
			{
				return this._claimedIdentifier;
			}
			set
			{
				if ((this._claimedIdentifier != value))
				{
					this.OnclaimedIdentifierChanging(value);
					this.SendPropertyChanging();
					this._claimedIdentifier = value;
					this.SendPropertyChanged("claimedIdentifier");
					this.OnclaimedIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friendlyIdentifier", DbType="NVARCHAR(MAX)")]
		public string friendlyIdentifier
		{
			get
			{
				return this._friendlyIdentifier;
			}
			set
			{
				if ((this._friendlyIdentifier != value))
				{
					this.OnfriendlyIdentifierChanging(value);
					this.SendPropertyChanging();
					this._friendlyIdentifier = value;
					this.SendPropertyChanged("friendlyIdentifier");
					this.OnfriendlyIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secret", DbType="NVARCHAR(MAX)", CanBeNull=false)]
		public string secret
		{
			get
			{
				return this._secret;
			}
			set
			{
				if ((this._secret != value))
				{
					this.OnsecretChanging(value);
					this.SendPropertyChanging();
					this._secret = value;
					this.SendPropertyChanged("secret");
					this.OnsecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="userID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
